✅ Fix login_user in routes/user.py

from fastapi.security import OAuth2PasswordRequestForm
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from db.database import get_db
from db.models import User
from utils.auth import verify_password, create_access_token
from schemas import AuthResponse

router = APIRouter(
    prefix="/auth",
    tags=["Authentication"]
)

@router.post("/login", response_model=AuthResponse)
def login_user(
    request: OAuth2PasswordRequestForm = Depends(),
    db: Session = Depends(get_db)
):
    """
    ✅ Authenticates a user and returns a JWT token.
    - Validates email and password.
    - Generates a JWT token if credentials are correct.
    """

    user = db.query(User).filter(User.email == request.username).first()

    if not user or not verify_password(request.password, user.password):
        raise HTTPException(status_code=401, detail="❌ Invalid email or password")

    # ✅ Generate JWT token
    access_token = create_access_token(user.id)

    return {"access_token": access_token, "token_type": "bearer"}


------------------------------------------------------------------------------------------------------------

✅ Example: Protect a Route with JWT (routes/review.py)

from fastapi import Depends
from fastapi.security import OAuth2PasswordBearer

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/login")  # ✅ Login URL

@router.get("/", response_model=List[ReviewDisplay])
def get_reviews(
    ride_id: Optional[int] = None,
    reviewee_id: Optional[int] = None,
    reviewer_id: Optional[int] = None,
    db: Session = Depends(get_db),
    token: str = Depends(oauth2_scheme)  # ✅ Requires authentication
):
    """
    ✅ Retrieves reviews based on optional filters (ride, reviewer, or reviewee).
    ✅ Requires JWT authentication.
    """
    query = db.query(Review)

    if ride_id:
        query = query.filter(Review.ride_id == ride_id)
    if reviewee_id:
        query = query.filter(Review.reviewee_id == reviewee_id)
    if reviewer_id:
        query = query.filter(Review.reviewer_id == reviewer_id)

    reviews = query.all()

    if not reviews:
        raise HTTPException(status_code=404, detail="No reviews found.")

    return reviews


------------------------------------------------------------------------------------------------------------

✅ Fix auth.py (JWT Token Creation & Validation)

import os
import jwt
from datetime import datetime, timedelta
from passlib.context import CryptContext
from dotenv import load_dotenv

load_dotenv()

# ✅ Load secret key from environment variables
SECRET_KEY = os.getenv("JWT_SECRET_KEY", "default_secret")  
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60  # 1 hour

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def hash_password(password: str) -> str:
    """ ✅ Hashes a password using bcrypt """
    return pwd_context.hash(password)

def verify_password(plain_password: str, hashed_password: str) -> bool:
    """ ✅ Verifies if a plaintext password matches the hashed version """
    return pwd_context.verify(plain_password, hashed_password)

def create_access_token(user_id: int) -> str:
    """ ✅ Generates a JWT token for authentication """
    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    payload = {"sub": str(user_id), "exp": expire}
    return jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)
