# carsharing-venv\Scripts\activate
# uvicorn main:app --reload

# ------------------------------------------------
# database silme ve python -c ile tekrar kurma
#-------------------------------------------------
# del gocargo.db
# python -c "from db.database import Base, engine; Base.metadata.create_all(engine)"


# ----------------------------
# ğŸš€ GoCarGo - Car Sharing API
# ----------------------------

import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from dotenv import load_dotenv
from fastapi import FastAPI, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from db.database import engine, Base
from routes import user, car, ride, booking, review, payment
import uvicorn
from utils.notifications import send_email
from utils.notifications import send_system_notifications








# âœ… .env dosyasÄ±nÄ± yÃ¼kle
load_dotenv()

# âœ… Ã‡evre deÄŸiÅŸkenlerini al
TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
TWILIO_PHONE_NUMBER = os.getenv("TWILIO_PHONE_NUMBER")
SENDGRID_API_KEY = os.getenv("SENDGRID_API_KEY")
SENDER_EMAIL = os.getenv("SENDER_EMAIL")

# âœ… VeritabanÄ± baÄŸlantÄ±sÄ±nÄ± baÅŸlat
from db.database import engine, Base
Base.metadata.create_all(bind=engine)  # TÃ¼m tablolarÄ± oluÅŸtur

# âœ… FastAPI uygulamasÄ±nÄ± baÅŸlat
app = FastAPI(
    title="goCARgo API",
    description="A professional car-sharing & ride-booking API GoCarGo.",
    version="1.0.0"
)

# âœ… CORS Middleware (Frontend baÄŸlantÄ±sÄ± iÃ§in)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # ğŸ”¹ Buraya frontend domainlerini ekleyebilirsin
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# âœ… TÃ¼m route dosyalarÄ±nÄ± dahil et
from routes import user, car, ride, booking, review, payment
from utils.notifications import send_system_notifications  # Bildirim fonksiyonlarÄ±

app.include_router(user.router)  # KullanÄ±cÄ± iÅŸlemleri
app.include_router(car.router)  # AraÃ§ kayÄ±t & yÃ¶netim
app.include_router(ride.router)  # Yolculuk oluÅŸturma
app.include_router(booking.router)  # Rezervasyon & Ã¶deme iÅŸlemleri
app.include_router(review.router)  # Yorumlar & deÄŸerlendirme
app.include_router(payment.router)  # Ã–deme iÅŸlemleri

# âœ… API SaÄŸlÄ±k Durumu KontrolÃ¼
@app.get("/health", tags=["System"])
def health_check():
    """
    ğŸš€ API'nin Ã§alÄ±ÅŸÄ±p Ã§alÄ±ÅŸmadÄ±ÄŸÄ±nÄ± kontrol etmek iÃ§in basit bir health-check endpointi.
    """
    return {"status": "ok", "message": "API is running smoothly"}

# âœ… Bildirimleri Arka Planda GÃ¶nder
@app.post("/send_notifications")
def send_notifications(background_tasks: BackgroundTasks):
    """
    ğŸ“© Sistem tarafÄ±ndan kullanÄ±cÄ±lara e-posta ve SMS gÃ¶nderimini baÅŸlatÄ±r.
    """
    background_tasks.add_task(send_system_notifications)
    return {"message": "Notifications are being processed in the background"}

# âœ… Uygulama baÅŸlatma
if __name__ == "__main__":
    uvicorn.run("main:app", host="127.0.0.1", port=8000, reload=True)
